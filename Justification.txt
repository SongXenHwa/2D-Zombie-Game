Documentation 

After doing this assignment for weeks and further discussion among the team, we have concluded that the engine package requires no modification as it is sufficient enough based on the design principles that we’ve learn in this semester’s unit. We could not suggest any better changes to it to make it better as we think that it is working perfectly fine with the other packages. First of all, what makes this engine package great is that it is mobility, which is the ability to reuse methods in this package in classes of other packages. It makes adding new features in classes or method easier as we could just implement or extend the classes from the engine package. Next is that method which were created in classes located in the engine are short and simple which fulfill the “Keep it Short and Simple” (KISS) principle. It makes understanding the functionality of the code much easier. As for example, during the start of the assignment where the team has not a single clue on what each method or class does but could easily catch up as the codes are short and simple. It helps the team to save a lot of time able to use it to do something else. Each method should only solve one functionality instead of putting all in one. It also helps debugging it way easier if an issue actually occurred. Next is that in the class of the engine packages, we think that the protected attributes were used sparingly as some method returns a method directly instead of an attribute which is great. As protected things are still accessible to subclasses in other packages therefore not fully optimizing it to prevent privacy leaks.
In terms of the SOLID principle, the engine fulfills the “Single Responsibility Principle” (SRP). This is because all the classes criteria are broken down in classes and subclasses rather than clumping it all into a single class. By doing that, it will make the code functionality very difficult and confusing to understand which will then lead to a need of great work to maintain or extend the codes. Whereas, for the classes in the engine package, all the classes have its own responsibilities. No class has no extra responsibilities and it contains all the functionality needed to support that responsibility. For example, “pickUpItemAction()” is not place as a method in the Actor class as it does not relates to Actor but it is placed in Item class as the class is responsible for it. The responsibilities of each classes are also not being broken down into extremely small classes as which is perfect as it will not overcomplicate the design of the game. Next will be the “Open/ Close Principle” (OCP), as new functionalities to the classes in engine package is possible but to modify the existing methods is difficult. As stated, Modifying the existing is code is difficult but is not impossible as other packages such as demo.conway, demo.mars and the game are depending on it. Which create a huge dependency towards the engine package since every package is depending on it. Therefore, if one were to modify a method for example changing a methods name, it would affect the packages which depends on it. Making the modification a hassle as they will need to change the method everywhere. Adding new functionality is fine as if one where to create a new functionality in other packages but require to add new method in the engine package, they could just add the new method without worrying that it might effect the other packages classes.No additional methods or classes are need in this engine package as the team thinks it all good and working fine.  Also, in this engine, classes do not inherits classes randomly if the classes do not relate to each other which is the “Liskov Subsitution Principle (LSP). This can be proven as Actions implements Action instead of some random class. By that, Actions can be called whenever Action is called. 

Next is the “Interface Segregation Principle” (ISP) as the engine is also fulfill the principle as the concrete class in the engine package are only connected through either an interface or an abstract class. No class is derived from a concrete class. It helps to reduce dependencies between modules. IF this principle I apple correctly it will gives us the flexibility and stability at the level of the entire architecture of the game and it will be able to evolve more securely and becomes more stable and robust.Another is the “Don’t Repeat yourself” principle (DRY) which was followed in this engine as codes in each class in the packages are not redundant. Codes are divided into smaller reusable units which can be called. For example, hurt and heal are not written in a single lengthy method using loops but is divided into each own method which can be called elsewhere. This is great as it saves times and effort in maintaining it, also, reduces the chances of bugs. Lastly, its regarding the “Stable Dependencies Principles” (SDP) as engine can be said as quite a stable package as it has 3 other packages depending on it. It will require a lot work to reconcile any changes with all the dependent packages and it has never happen before therefore making it stable enough. 
